import React, { useEffect, useState } from "react";
import logo from "./logo.svg";
import "./App.css";
import TodoForm from "./components/TodoForm";
import TodoList, { TodoItemProps } from "./components/TodoList";
import Pagination from "./components/Pagination";
import TodoSearch from "./components/TodoSearch";
import axios from "axios";
import axiosClient from "./api/axiosClient";

function App() {
   /** Ch·ª©a th√¥ng tin todo c·ªßa ng∆∞·ªùi d√πng sau khi nh·∫≠p */
   const [todoList, setTodoList] = useState<TodoItemProps[]>([]);
   const [page, setPage] = useState(1);
   const [value, setValue] = useState("");

   const onSubmit = (newValue: string) => {
      const newTodo = {
         id: todoList.length + 1,
         title: newValue,
         completed: false,
      };

      // T·∫°o b·∫£n sao c·ªßa todoList ƒë·ªÉ thay ƒë·ªïi state th√¥ng qua setTodoList,
      // v√† th√™m m·ªõi todo v√†o ƒë√≥.
      const cloneTodoList = [...todoList];
      cloneTodoList.push(newTodo);
      setTodoList(cloneTodoList);
   };

   const onCompleteChange = (todo: TodoItemProps) => {
      const cloneTodoList = [...todoList];
      /** T√¨m v·ªã tr√≠ c·ªßa todo v·ª´a m·ªõi ƒë∆∞·ª£c b·∫•m trong m·∫£ng */
      // const index = cloneTodoList.indexOf(todo);
      // const existedTodo = cloneTodoList[index];
      // /** Update l·∫°i gi√° tr·ªã completed c·ªßa todo m√¨nh v·ª´a t√¨m th·∫•y */
      // existedTodo.completed = !existedTodo.completed;

      const newTodoList = cloneTodoList.map((existedTodo) => {
         if (existedTodo.id === todo.id) {
            return { ...existedTodo, completed: !existedTodo.completed };
         }

         return existedTodo;
      });

      /** C·∫≠p nh·∫≠t l·∫°i m·∫£ng todoList */
      setTodoList(newTodoList);
   };

   const onPageChange = (newPage: number) => {
      setPage(newPage);
   };

   const onValueChange = (newValue: string) => {
      setValue(newValue);
   };

   useEffect(() => {
      // X·ª≠ l√Ω g·ªçi API trong n√†y;

      const url = value ? `/todos?title=${value}` : `/todos?_page=${page}`;

      const fetchTodos = async () => {
         try {
            // const response = await fetch(url);

            // if (response.ok === false) {
            //    throw new Error("HTTP error!");
            // }

            // const data = await response.json();

            /** Methods: GET, POST, PUT, PATCH, DELETE */
            /**
             * C√°ch d√πng axios tr·ª±c ti·∫øp: axios. method()
             * C√°ch d√πng axios gi√°n ti·∫øp: axios({
             *    method: '...'
             * })
             */
            const response: any[] = await axiosClient.get(url);
            setTodoList(response);
         } catch (error) {
            console.error("LÔøΩÔøΩi khi l·∫•y d·ªØ li·ªáu: ", error);
            setTodoList([]);
         }
      };

      fetchTodos();

      return () => {};
   }, [page, value]);

   const createTodo = async () => {
      try {
         /** n∆°i g·ªçi api v√† ch·ª©a d·ªØ li·ªáu th√†nh c√¥ng */
         const newTodo = {
            userId: 1,
            id: 1,
            title: "Khoa Khoa Khoa",
            completed: false,
         };

         const response = await axiosClient.post("/todos", newTodo);
      } catch (error) {
         /** n∆°i ch·ª©a l·ªói c·ªßa server tr·∫£ v·ªÅ */
         console.log("üöÄ ~ createTodo ~ error:", error);
      }
   };

   const editTodo = async () => {
      try {
         const updatedTodo = {
            userId: 1,
            id: 1,
            title: "klsdjasdlfjlasjdfl;asjldf",
            completed: false,
         };

         const id = updatedTodo.id;

         const response = await axiosClient.patch(`/todos/${id}`, updatedTodo);
      } catch (error) {
         console.log("üöÄ ~ editTodo ~ error:", error);
      }
   };

   const deleteTodo = async () => {
      try {
         const id = 1;
         const response = await axiosClient.delete(`/todos/${id}`);
      } catch (error) {
         console.log("üöÄ ~ deleteTodo ~ error:", error);
      }
   };

   /**
    * H√†m b·∫•t ƒë·ªìng b·ªô : async v√† await
    * c√°ch t·∫°o h√†m => t·∫°o h√†m nh∆∞ b√¨nh th∆∞·ªùng, tr∆∞·ªõc h√†m g·∫Øn v√†o ch·ªØ async, trong h√†m d√πng await
    * await n√†y d√πng ƒë·ªÉ g·ªçi API.
    * v√† 2 c√°i n√†y phri·∫£ ƒëi c√πng v·ªõi nhau.
    * l∆∞u √Ω: trong h√†m async th√¨ ph·∫£i d√πng try catch .
    * C√°c ph∆∞∆°ng th·ª©c g·ªçi API:
    *
    * GET: D√πng ƒë·ªÉ g·ªçi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m + Ko truy·ªÅn data l√™n server
    * POST: D√πng ƒë·ªÉ t·∫°o m·ªõi s·∫£n ph·∫©m + Ph·∫£i g·ªüi data l√™n server
    * PUT: D√πng ƒë·ªÉ s·ª≠a s·∫£n ph·∫©m + Ph·∫£i g·ªüi data l√™n ph√≠a server
    * PATCH: D√πng ƒë·ªÉ s·ª≠a s·∫£n ph·∫©m + Ph·∫£i g·ªüi data l√™n ph√≠a server
    * DELETE: D√πng ƒë·ªÉ xo√° s·∫£n ph·∫©m + Ko truy·ªÅn data l√™n server
    */

   return (
      <div className="App">
         <button
            type="button"
            onClick={createTodo}
         >
            T·∫°o
         </button>
         <button
            type="button"
            onClick={editTodo}
         >
            S·ª≠a
         </button>
         <button
            type="button"
            onClick={deleteTodo}
         >
            Xo√°
         </button>
         <Pagination
            page={page}
            onPageChange={onPageChange}
         />
         <TodoSearch
            value={value}
            onValueChange={onValueChange}
         />
         {/* <TodoForm onSubmit={onSubmit} /> */}

         <TodoList
            todoList={todoList}
            onCompleteChange={onCompleteChange}
         />
      </div>
   );
}

export default App;
